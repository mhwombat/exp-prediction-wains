# Name of the experiment. Used as the name of the daemon.
# If you want to run multiple experiments simultaneously,
# each must have a different name. Also used in naming wains.
experimentName="Prediction60"

# The working directory, which contains all of the data for
# this experiment.
workingDir="/home/eamybut/alife/prediction60"

# The size of the memory cache used to hold wains.
cacheSize=1000000

# Number of microseconds to sleep after each agent gets its turn
# at the CPU.
sleepTimeBetweenTasks=0

# Vector length. All input vectors must have the same number of elements.
vectorLength=4

# Wains will be killed when they reach this age
maxAge=1000

#####
# Extra information
#####

# Show the decider models as each decision is made.
showDeciderModels=True

# Show all the predictions made by the decider.
showPredictions=True

#####
# Prediction
#####

# Reward wains for any predictions that are actual +/- this value
accuracyMargin=0.1

# Energy change for the most accurate predictions.
# This is normally an energy GAIN, so it should be positive.
accuracyDeltaE=0.1

#####
# Metabolism
#####

# To ensure that smaller agents don't have an excessive advantage
# over larger agents, part of the metabolic cost is fixed.
# Compare with maxSizeBasedMetabolismDeltaE.
# This is normally an energy LOSS, so it should be negative.
baseMetabDeltaE=-0.049

# To ensure that agents use resources efficiently, part of their
# metabolic cost is based on their size.
# This is normally an energy LOSS, so it should be negative.
# To set this value, create the initial population and note the
# "avg. size" value reported in the log summary.
# Multiply the "avg. size" by -8e-14 to get a good value for
# energyCostPerByte. (You can round it off, the exact value is
# not critical.)
# This will result in avg. metabolism Δe ≅ -0.05, at least for
# the first few rounds.
energyCostPerByte=-1.0e-7

# A wain rearing a child pays a fraction of the metabolic cost
# that the child would pay if it were full-grown. It's only a
# fraction because children do not require as much processor 
# time.
# You probably won't need to alter this field.
childCostFactor=0.1

#####
# Reproduction
#####

# Controls how often wains have an opportunity to flirt.
flirtingFrequency=0.1

#####
# Population size control
#####

# Size of the initial population
initialPopSize=5

# Ideal size for the population, expressed as a fraction of
# initialPopSize.
# Typically it will be larger than 1, to allow the population
# to "learn" to mate before it faces a serious survival
# challenge.
# You probably won't need to alter this field.
idealPopSize=1.5

# The daemon will stop if the population falls outside this
# range, which is expressed as a fraction of idealPopSize.
# This gives you a chance to analyse the problem and
# perhaps adjust your configuration.
# You probably won't need to alter this field.
popAllowedRange=(0.3,5)

#####
# Configuring the initial gene pool
#####

# Constrains the predicted outomes in response models.
# Keeping this small helps to ensure that once a wain finds
# a good action for a particular scenario, it is more likely
# to stick with it.
outcomeRange=(-0.05,0.05)

# Constrains the amount of energy that wains in the initial
# population give to their children at birth.
# You probably won't need to alter this field.
devotionRange=(0.0,0.3)

# Constrains the age at which wains in the initial population
# mature and leave their parents.
# You probably won't need to alter this field.
maturityRange=(1,100)

# The classifier portion of a wain's brain is a Self-Organising
# Map (SOM). This SOM uses a hexagonal grid with hexagonal tiles.
# The setting below controls the maximum length of one side of
# the grid, for the /initial/ population. The processing time
# required is proportional to the square of this value.
classifierSizeRange=(2,50)

# The range of values allowed for r0 (the learning rate applied
# to the BMU at time 0) in the learning function for the
# classifier in the initial population.
# You probably won't need to alter this field.
classifierR0Range=(0.8,1)

# The range of values allowed for d, the decay rate in the
# learning function for the classifier in the initial population.
# You probably won't need to alter this field.
classifierDecayRange=(0,0.2)

# The decider portion of a wain's brain is also a SOM, using a
# hexagonal grid with hexagonal tiles. The setting below controls
# the maximum length of one side of the grid, for the /initial/
# population. The processing time required is proportional to
# the square of this value.
# You probably won't need to alter this field.
deciderSizeRange=(2,20)

# The range of values allowed for r0 (the learning rate applied
# to the BMU at time 0) in the learning function for the
# decider in the initial population.
# You probably won't need to alter this field.
deciderR0Range=(0.8,1)

# The range of values allowed for d, the decay rate in the
# learning function for the decider in the initial population.
# You probably won't need to alter this field.
deciderDecayRange=(0,0.2)

#####
# Health checks
#####

# Each item in this list is a constraint on a particular statistic 
# to be satisfied beginning at a particular time. At the end of
# each round, the constraints are checked. If any of the 
# constraints fail, the daemon halts.
# Constraints can either be "In" a range, "GE" (greater than or 
# equal to) a value, or "LE" (less than or equal to) a value.
# You probably won't need to alter this field.
checkpoints=[Check 10 "avg. err" (GE -100000)]
